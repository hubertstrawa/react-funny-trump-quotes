{"version":3,"sources":["assets/three.png","components/layout/spinner2.svg","components/layout/Navbar.js","components/quotes/Search.js","components/quotes/QuoteItem.js","components/layout/Spinner.js","components/quotes/Quotes.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Navbar","react_default","a","createElement","className","src","Trump","style","height","Search","props","_useState","useState","_useState2","Object","slicedToArray","text","setText","onSubmit","e","preventDefault","search","Input","marginBottom","fluid","placeholder","value","onChange","target","Button","type","quoteStyle","width","margin","QuoteItem","_ref","_ref$quote","quote","tags","Message","floating","fontSize","Spinner","react","spinner","alt","display","Quotes","quotes","count","loading","undefined","Transition","visible","animation","duration","map","quotes_QuoteItem","key","quote_id","App","setQuotes","_useState3","_useState4","setCount","_useState5","_useState6","setLoading","searchQuotes","asyncToGenerator","regenerator_default","mark","_callee","res","wrap","_context","prev","next","axios","get","concat","sent","data","_embedded","console","log","t0","stop","_x","apply","this","arguments","layout_Navbar","quotes_Search","layout_Spinner","quotes_Quotes","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.db0a15cd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/three.20efe119.png\";","module.exports = __webpack_public_path__ + \"static/media/spinner2.7782d5a5.svg\";","import React from 'react';\nimport Trump from '../../assets/three.png';\n\nconst Navbar = () => {\n  return (\n    <div className='navbar'>\n      <img src={Trump} style={{ height: '15rem' }} />\n      <h1>Funny & Ridiculous Quotes...</h1>\n    </div>\n  );\n};\n\nexport default Navbar;\n","import React, { useState } from 'react';\nimport { Input, Button } from 'semantic-ui-react';\n\nconst Search = props => {\n  const [text, setText] = useState('');\n\n  const onSubmit = e => {\n    e.preventDefault();\n    props.search(text);\n    setText('');\n  };\n\n  const onChange = e => {\n    setText(e.target.value);\n  };\n\n  return (\n    <div>\n      <form onSubmit={onSubmit} className='form'>\n        <Input\n          style={{ marginBottom: '0.8rem' }}\n          fluid\n          placeholder='Search'\n          value={text}\n          onChange={onChange}\n        />\n        <Button fluid type='submit'>\n          Click Here\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default Search;\n","import React from 'react';\nimport { Message } from 'semantic-ui-react';\n\nconst QuoteItem = ({ quote: { value, tags } }) => {\n  return (\n    <Message floating style={quoteStyle}>\n      <p>{value}</p>\n      <p style={{ fontSize: '0.7rem' }}>\n        tags: <strong>{tags}</strong>\n      </p>\n    </Message>\n  );\n};\n\nconst quoteStyle = {\n  width: '80%',\n  margin: '1.5rem auto'\n};\n\nexport default QuoteItem;\n","import React, { Fragment } from 'react';\nimport spinner from './spinner2.svg';\n\nconst Spinner = () => (\n  <Fragment>\n    <img\n      src={spinner}\n      alt='Loading...'\n      style={{ width: '100px', margin: 'auto', display: 'block' }}\n    />\n  </Fragment>\n);\n\nexport default Spinner;\n","import React, { Fragment } from 'react';\nimport QuoteItem from './QuoteItem';\nimport Spinner from '../layout/Spinner';\nimport { Divider, Transition } from 'semantic-ui-react';\n\nconst Quotes = (quotes, count, loading) => {\n  if (quotes.quotes === undefined) {\n    return <h1>There aren't any</h1>;\n  } else {\n    return (\n      <Transition visible='false' animation='scale' duration={500}>\n        <div>\n          {quotes.quotes.map(quote => (\n            <QuoteItem key={quote.quote_id} quote={quote} />\n          ))}\n        </div>\n      </Transition>\n    );\n  }\n};\n\nconst quoteStyle = {\n  display: 'flex',\n  flexDirection: 'column'\n};\n\nexport default Quotes;\n","import React, { useState } from 'react';\nimport Navbar from './components/layout/Navbar';\nimport Search from './components/quotes/Search';\nimport Quotes from './components/quotes/Quotes';\nimport Spinner from './components/layout/Spinner';\nimport axios from 'axios';\nimport './App.css';\n\nconst App = () => {\n  const [quotes, setQuotes] = useState([]);\n  const [count, setCount] = useState(0);\n  const [loading, setLoading] = useState(false);\n\n  const searchQuotes = async text => {\n    try {\n      setLoading(true);\n\n      const res = await axios.get(\n        `https://cors-anywhere.herokuapp.com/https://api.tronalddump.io/search/quote?query=${text}`\n      );\n      setQuotes(res.data._embedded.quotes);\n      setCount(res.data.count);\n      console.log(res.data._embedded.quotes);\n      setLoading(false);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return (\n    <div className='App'>\n      <Navbar />\n      <Search search={searchQuotes} />\n      {loading && <Spinner />}\n      <Quotes quotes={quotes} count={count} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}